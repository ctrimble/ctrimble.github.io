<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Signal | Mr. Hat's Lisbon Arithmetic]]></title>
  <link href="http://xiantrimble.com/blog/categories/signal/atom.xml" rel="self"/>
  <link href="http://xiantrimble.com/"/>
  <updated>2014-03-23T13:35:56-07:00</updated>
  <id>http://xiantrimble.com/</id>
  <author>
    <name><![CDATA[Christian Trimble]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing ASMifier]]></title>
    <link href="http://xiantrimble.com/blog/2014/03/23/installing-asmifier/"/>
    <updated>2014-03-23T08:13:57-07:00</updated>
    <id>http://xiantrimble.com/blog/2014/03/23/installing-asmifier</id>
    <content type="html"><![CDATA[<p>With the release of Java 8, it is time to figure out the impact of the new language features on some of
my projects.  To get a better idea of what is going on in the bytecode, I have been transforming some compiled classes
into ASM class visitors, using ASMifier.  I will be sharing those in some later posts, but I thought I would
get started with some instruction on how to install and use ASMifier to look at bytecode.</p>

<h2>So, what is ASM and ASMifier</h2>

<p>For those not familure with <a href="http://asm.ow2.org/">ASM</a>, it is a bytecode processing library.  It is
lower level than other bytecode inspection/generation tools I have used, but it gives you a lot of control over what is
going on in class files that you generate.  It is great for transforming existing bytecode or generating bytecode
from scratch.</p>

<p>ASMifier is a tool that transforms a class file into the source code that would generate that class using ASM&rsquo;s APIs.
This is really convienent for building class transforms, since you can easily see the class calls that are
going to be made by visiting a particular class file.  When I am creating class transforms, my workflow usually looks
like this:</p>

<ol>
<li>create an example of the transform&rsquo;s input and output in java</li>
<li>compile and run asmifier on both classes</li>
<li>create a transform that maps the input example to the output example.</li>
</ol>


<p>This process has worked well for me and lends itself to a generalized JUnit test class.  Perhaps we can cover that in
a future post.</p>

<h2>Getting ASMifier Installed</h2>

<p>ASMifier is located in the asm-util.jar file and requires the asm.jar file to operate.  ASM provides an all jar,
so an easy way to get ASMifier running is to get the all jar on the path, prepended a shell script to it,
and mark it as executable.  Assuming that <code>~/bin</code> is on your path, these commands will add an <code>asmifier</code> command
to your shell.</p>

<pre><code>printf '#!/bin/sh\n\nexec java -classpath "$0" org.objectweb.asm.util.ASMifier "$@"\n\n' &gt; ~/bin/asmifier
curl 'http://central.maven.org/maven2/org/ow2/asm/asm-all/5.0.1/asm-all-5.0.1.jar' &gt;&gt; ~/bin/asmifier
chmod +x ~/bin/asmifier
</code></pre>

<p>Now, we can get some usage information by typing <code>asmifier</code> in the terminal.</p>

<pre><code>asmifier
Prints the ASM code to generate the given class.
Usage: ASMifier [-debug] &lt;fully qualified class name or class file name&gt;
</code></pre>

<h2>Using ASMifier</h2>

<p>Now that we have ASMifier installed, let&rsquo;s run a quick transform on a simple &ldquo;Hello World!&rdquo; class file.  To begin, we
will need some compiled source.  Write this class file into a file called HelloWorld.java.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorld.java  (HelloWorld.java)</span> <a href='/downloads/code/asm/HelloWorld.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then compile it with javac, creating HelloWorld.class.</p>

<pre><code>javac HelloWorld.java
</code></pre>

<p>Now we can run asmifier on this class file, and see the method calls that will be made when visiting it.</p>

<pre><code>asmifier HelloWorld.class &gt; HelloWorldDump.java
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorldDump.java  (HelloWorldDump.java)</span> <a href='/downloads/code/asm/HelloWorldDump.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.attrs.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldDump</span> <span class="kd">implements</span> <span class="n">Opcodes</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">dump</span> <span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">ClassWriter</span> <span class="n">cw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassWriter</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">FieldVisitor</span> <span class="n">fv</span><span class="o">;</span>
</span><span class='line'><span class="n">MethodVisitor</span> <span class="n">mv</span><span class="o">;</span>
</span><span class='line'><span class="n">AnnotationVisitor</span> <span class="n">av0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cw</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="mi">52</span><span class="o">,</span> <span class="n">ACC_PUBLIC</span> <span class="o">+</span> <span class="n">ACC_SUPER</span><span class="o">,</span> <span class="s">&quot;HelloWorld&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">&quot;java/lang/Object&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">mv</span> <span class="o">=</span> <span class="n">cw</span><span class="o">.</span><span class="na">visitMethod</span><span class="o">(</span><span class="n">ACC_PUBLIC</span><span class="o">,</span> <span class="s">&quot;&lt;init&gt;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitCode</span><span class="o">();</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ALOAD</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKESPECIAL</span><span class="o">,</span> <span class="s">&quot;java/lang/Object&quot;</span><span class="o">,</span> <span class="s">&quot;&lt;init&gt;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">RETURN</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitMaxs</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitEnd</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="n">mv</span> <span class="o">=</span> <span class="n">cw</span><span class="o">.</span><span class="na">visitMethod</span><span class="o">(</span><span class="n">ACC_PUBLIC</span> <span class="o">+</span> <span class="n">ACC_STATIC</span> <span class="o">+</span> <span class="n">ACC_VARARGS</span><span class="o">,</span> <span class="s">&quot;main&quot;</span><span class="o">,</span> <span class="s">&quot;([Ljava/lang/String;)V&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitCode</span><span class="o">();</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitFieldInsn</span><span class="o">(</span><span class="n">GETSTATIC</span><span class="o">,</span> <span class="s">&quot;java/lang/System&quot;</span><span class="o">,</span> <span class="s">&quot;out&quot;</span><span class="o">,</span> <span class="s">&quot;Ljava/io/PrintStream;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitLdcInsn</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitMethodInsn</span><span class="o">(</span><span class="n">INVOKEVIRTUAL</span><span class="o">,</span> <span class="s">&quot;java/io/PrintStream&quot;</span><span class="o">,</span> <span class="s">&quot;println&quot;</span><span class="o">,</span> <span class="s">&quot;(Ljava/lang/String;)V&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">RETURN</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitMaxs</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">mv</span><span class="o">.</span><span class="na">visitEnd</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">cw</span><span class="o">.</span><span class="na">visitEnd</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">cw</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note:</strong> Unfortunately, package <code>org.objectweb.asm.attrs</code> was removed in ASM 5.0, but this was not reflected in the ASMifier tool, so you will
need to remove that import if you want to compile this generated file.</p>

<p>That is it for this post.  In some future articles, we will look at the way lambdas and method references are represented in
ASM class visitors.  Stay tuned.</p>
]]></content>
  </entry>
  
</feed>
